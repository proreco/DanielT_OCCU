@page "/"
@using DanielT_OCCU.Data
@inject DataStorage DataStorage
@rendermode InteractiveServer

<PageTitle>Character List</PageTitle>

<h1>Character Database</h1>

<div class="card mb-4">
    <div class="card-body">
        <h5 class="card-title">Add New Character</h5>
        <EditForm EditContext="@editContext" OnValidSubmit="@HandleValidSubmit" FormName="addCharacterForm">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="row g-3">
                <div class="col-md-3">
                    <label for="name" class="form-label">Name</label>
                    <InputText id="name" class="form-control" @bind-Value="newCharacter.name" />
                    <ValidationMessage For="@(() => newCharacter.name)" />
                </div>
                <div class="col-md-3">
                    <label for="class" class="form-label">Class</label>
                    <InputText id="class" class="form-control" @bind-Value="newCharacter.characterClass" />
                </div>
                <div class="col-md-3">
                    <label for="weapon" class="form-label">Weapon</label>
                    <InputText id="weapon" class="form-control" @bind-Value="newCharacter.favoredWeapon" />
                </div>
                <div class="col-md-3">
                    <label for="catchphrase" class="form-label">Catchphrase</label>
                    <InputText id="catchphrase" class="form-control" @bind-Value="newCharacter.catchphrase" />
                </div>
            </div>
            <div class="mt-3">
             @if (isEditMode)
                {
                    <button type="submit" class="btn btn-warning">Edit Character</button>
                    <button type="button" class="btn btn-secondary ms-2" @onclick="CancelEdit">Cancel</button>
                }
                else
                {
                <button type="submit" class="btn btn-primary">Add Character</button>
                }
            </div>
        </EditForm>
    </div>
</div>

@if (_characters != null)
{
    <div class="mb-3">
        <div class="col-3">
            <input type="text" class="form-control" placeholder="Search by Name..." @bind="searchName" @bind:event="oninput" />
        </div>
    </div>
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Class</th>
                <th>Weapon</th>
                <th>Catchphrase</th>
                <th>Last Updated</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var character in filteredCharacters)
            {
                <tr>
                    <td>@character.name</td>
                    <td>@character.characterClass</td>
                    <td>@character.favoredWeapon</td>
                    <td>@character.catchphrase</td>
                    <td>@character.updatedAt.ToLocalTime()</td>
                    <td>
                        <button type="button" class="btn btn-danger btn-sm" @onclick="() => EditCharacter(character)">
                            Edit
                        </button>
                    </td>
                    <td>
                        <button type="button" class="btn btn-danger btn-sm" @onclick="() => CopyCharacter(character)">
                            Copy
                        </button>
                    </td>
                    <td>
                        <button type="button" class="btn btn-danger btn-sm" @onclick="() => DeleteCharacter(character.name)">
                            Delete
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<DataObject> selectedCharacters = new List<DataObject>(capacity: 2);

    private EditContext editContext;
    private ValidationMessageStore messageStore;
    private bool isEditMode = false;
    private string oldName = string.Empty;

    private List<DataObject>? _characters;
    [SupplyParameterFromForm]
    private DataObject? newCharacter {get; set;}
    private string? searchName = string.Empty;
    private IEnumerable<DataObject> filteredCharacters =>
    string.IsNullOrWhiteSpace(searchName)
        ? _characters ?? Enumerable.Empty<DataObject>()
        : _characters?.Where(c => c.name.Contains(searchName, StringComparison.OrdinalIgnoreCase)) ?? Enumerable.Empty<DataObject>();

    protected override void OnInitialized()
    { 
        newCharacter ??= new();
        editContext = new EditContext(newCharacter);
        messageStore = new ValidationMessageStore(editContext);
        editContext.OnValidationRequested += (s, e) => messageStore.Clear();
        editContext.OnFieldChanged += (s, e) => messageStore.Clear(e.FieldIdentifier);
    }
    protected override async Task OnInitializedAsync()
    {
        _characters = await DataStorage.LoadData();
    }

    private async Task HandleValidSubmit()
    {
        messageStore.Clear();
        if(newCharacter?.name != null || newCharacter?.name != ""){
            if(isEditMode){
                if(oldName != newCharacter.name && _characters.Any(c => c.name == newCharacter.name)){
                    var fieldId = editContext.Field(nameof(newCharacter.name));
                    messageStore.Add(fieldId, "Name already exists.");
                    return;
                }
                newCharacter.updatedAt = DateTime.Now;
                Console.WriteLine($"Editing Name: {newCharacter.name}");
                await DataStorage.UpdateData(oldName, newCharacter);
                _characters = await DataStorage.LoadData();
                newCharacter = new();
                isEditMode = false;
                oldName = string.Empty;
                StateHasChanged();
                return;
            } else if(!_characters.Any(c => c.name == newCharacter.name)){
                newCharacter.updatedAt = DateTime.Now;
            Console.WriteLine($"User Name: {newCharacter.name}");
            await DataStorage.AddData(newCharacter);
            _characters = await DataStorage.LoadData();
            newCharacter = new();
            StateHasChanged();
            } else {
                var fieldId = editContext.Field(nameof(newCharacter.name));
                messageStore.Add(fieldId, "Name already exists.");
            }
        } else {
            var fieldId = editContext.Field(nameof(newCharacter.name));
            messageStore.Add(fieldId, "Name is required.");
        }
    }
        
    

    private async Task DeleteCharacter(string name)
{
    Console.WriteLine($"Deleting Name: {name}");
    await DataStorage.DeleteData(name);
    _characters = await DataStorage.LoadData();
    StateHasChanged();
}
    private void CopyCharacter(DataObject character)
    {
        newCharacter = new DataObject 
    {
        name = character.name,
        characterClass = character.characterClass,
        favoredWeapon = character.favoredWeapon,
        catchphrase = character.catchphrase,
        updatedAt = character.updatedAt
    };
        StateHasChanged();
    }


    private void EditCharacter(DataObject character)
    {
        newCharacter = new DataObject 
        {
            name = character.name,
            characterClass = character.characterClass,
            favoredWeapon = character.favoredWeapon,
            catchphrase = character.catchphrase,
            updatedAt = character.updatedAt
        };
        oldName = character.name;
        isEditMode = true;
        StateHasChanged();
    }

    private void CancelEdit()
    {
        newCharacter = new DataObject();
        oldName = string.Empty;
        isEditMode = false;
        StateHasChanged();
    }

    private void OnToggleSelect(ChangeEventArgs e, DataObject character)
    {
        bool isChecked = (bool)e.Value;

        if (isChecked)
        {
            if (selectedCharacters.Count < 2)
                selectedCharacters.Add(character);
        }
        else
        {
            selectedCharacters.Remove(character);
        }
    }

    private bool IsDifferent(string? value1, string? value2) =>
        !string.Equals(value1, value2, StringComparison.Ordinal);
}
