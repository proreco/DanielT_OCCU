@page "/"
@using DanielT_OCCU.Data
@using DanielT_OCCU.Shared
@inject DataStorage DataStorage
@rendermode InteractiveServer

<PageTitle>Character List</PageTitle>

<h1>Character Database</h1>

<div class="card mb-4">
    <div class="card-body">
        <h5 class="card-title">Add New Character</h5>
        <EditForm EditContext="@editContext" OnValidSubmit="@HandleValidSubmit" FormName="addCharacterForm">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="row g-3">
                <div class="col-md-3">
                    <label for="name" class="form-label">Name</label>
                    <InputText id="name" class="form-control" @bind-Value="newCharacter.Name" />
                </div>
                <div class="col-md-3">
                    <label for="class" class="form-label">Class</label>
                    <InputText id="class" class="form-control" @bind-Value="newCharacter.CharacterClass" />
                </div>
                <div class="col-md-3">
                    <label for="weapon" class="form-label">Weapon</label>
                    <InputText id="weapon" class="form-control" @bind-Value="newCharacter.FavoredWeapon" />
                </div>
                <div class="col-md-3">
                    <label for="catchphrase" class="form-label">Catchphrase</label>
                    <InputText id="catchphrase" class="form-control" @bind-Value="newCharacter.Catchphrase" />
                </div>
            </div>
            <div class="mt-3">
                @if (isEditMode)
                {
                    <button type="submit" class="btn btn-warning">Save Changes</button>
                    <button type="button" class="btn btn-secondary ms-2" @onclick="CancelEdit">Cancel</button>
                }
                else
                {
                    <button type="submit" class="btn btn-primary">Add Character</button>
                }
            </div>
        </EditForm>
    </div>
</div>

@if (_characters != null)
{
    <div class="mb-3">
        <div class="col-3">
            <input type="text" class="form-control" placeholder="Search by Name..." @bind="searchName"
                @bind:event="oninput" />
        </div>
    </div>
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Class</th>
                <th>Weapon</th>
                <th>Catchphrase</th>
                <th>Last Updated</th>
                <th>Compare</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var character in filteredCharacters)
            {
                <tr>
                    <td>@character.Name</td>
                    <td>@if (selectedCharacters.Count == 2 && selectedCharacters.Any(c => ComparisonUtils.EqualsIgnoreCase(c.Name, character.Name))){
                        <span
                            class="@(ComparisonUtils.IsDifferent(selectedCharacters[0].CharacterClass, selectedCharacters[1].CharacterClass) ? "highlight" : "highlight-green")">
                            @character.CharacterClass
                        </span>
                    } else
                    {
                        @character.CharacterClass
                    }
                </td>
                <td>@if (selectedCharacters.Count == 2 && selectedCharacters.Any(c => c.Name == character.Name)){
                    <span
                        class="@(ComparisonUtils.IsDifferent(selectedCharacters[0].FavoredWeapon, selectedCharacters[1].FavoredWeapon) ? "highlight" : "highlight-green")">
                        @character.FavoredWeapon
                    </span>
                }
                else
                {
                    @character.FavoredWeapon
                }
            </td>
            <td>
                @if (selectedCharacters.Count == 2 && selectedCharacters.Any(c => ComparisonUtils.EqualsIgnoreCase(c.Name, character.Name)))
                {
                    <span
                        class="@(ComparisonUtils.IsDifferent(selectedCharacters[0].Catchphrase, selectedCharacters[1].Catchphrase) ? "highlight" : "highlight-green")">
                        @character.Catchphrase
                    </span>
                }
                else
                {
                    @character.Catchphrase
                }
            </td>
            <td>@character.UpdatedAt.ToLocalTime()</td>
            <td>
                <input type="checkbox" checked="@selectedCharacters.Any(c => ComparisonUtils.EqualsIgnoreCase(c.Name, character.Name))"
                    @onchange="e => OnToggleSelect(e, character)"
                    disabled="@(selectedCharacters.Count >= 2 && !selectedCharacters.Any(c => ComparisonUtils.EqualsIgnoreCase(c.Name, character.Name)))" />
            </td>
            <td>
                <button type="button" class="btn btn-danger btn-sm" @onclick="() => EditCharacter(character)">
                    Edit
                </button>
            </td>
            <td>
                <button type="button" class="btn btn-danger btn-sm" @onclick="() => CopyCharacter(character)">
                    Copy
                </button>
            </td>
            <td>
                <button type="button" class="btn btn-danger btn-sm" @onclick="() => DeleteCharacter(character.Name)">
                    Delete
                </button>
            </td>
        </tr>
                }
    </tbody>
</table>
}

@code {

    private List<DataObject> selectedCharacters = new List<DataObject>(capacity: 2);

    private EditContext editContext;
    private ValidationMessageStore messageStore;
    private bool isEditMode = false;
    private string oldName = string.Empty;

    private List<DataObject>? _characters;
    [SupplyParameterFromForm]
    private DataObject? newCharacter { get; set; }
    private string? searchName = string.Empty;
    private IEnumerable<DataObject> filteredCharacters =>
    string.IsNullOrWhiteSpace(searchName)
    ? _characters ?? Enumerable.Empty<DataObject>()
    : _characters?.Where(c => c.Name.Contains(searchName, StringComparison.OrdinalIgnoreCase)) ??
    Enumerable.Empty<DataObject>();

    protected override void OnInitialized()
    {
        newCharacter ??= new();
        editContext = new EditContext(newCharacter);
        messageStore = new ValidationMessageStore(editContext);
        editContext.OnValidationRequested += (s, e) => messageStore.Clear();
        editContext.OnFieldChanged += (s, e) =>
        {
            messageStore.Clear(e.FieldIdentifier);
            editContext.NotifyValidationStateChanged();
        };
    }
    protected override async Task OnInitializedAsync()
    {
        _characters = await DataStorage.LoadData();
    }

    private async Task HandleValidSubmit()
    {
        messageStore.Clear();
        if (string.IsNullOrWhiteSpace(newCharacter?.Name) == false)
        {
            if (isEditMode)
            {
                if (oldName != newCharacter.Name && _characters.Any(c => ComparisonUtils.EqualsIgnoreCase(c.Name, newCharacter.Name)))
                {
                    var fieldId = editContext.Field(nameof(newCharacter.Name));
                    messageStore.Add(fieldId, "Name already exists.");
                    return;
                }
                if (selectedCharacters.Any(c => ComparisonUtils.EqualsIgnoreCase(c.Name, oldName)))
                {
                    selectedCharacters.RemoveAll(c => ComparisonUtils.EqualsIgnoreCase(c.Name, oldName));
                    selectedCharacters.Add(newCharacter);
                }
                newCharacter.UpdatedAt = DateTime.Now;
                Console.WriteLine($"Editing Name: {newCharacter.Name}");
                await DataStorage.UpdateData(oldName, newCharacter);
                _characters = await DataStorage.LoadData();
                newCharacter = new();
                isEditMode = false;
                oldName = string.Empty;
                StateHasChanged();
                return;
            }
            else if (!_characters.Any(c => ComparisonUtils.EqualsIgnoreCase(c.Name, newCharacter.Name)))
            {
                newCharacter.UpdatedAt = DateTime.Now;
                Console.WriteLine($"User Name: {newCharacter.Name}");
                await DataStorage.AddData(newCharacter);
                _characters = await DataStorage.LoadData();
                newCharacter = new();
                StateHasChanged();
            }
            else
            {
                var fieldId = editContext.Field(nameof(newCharacter.Name));
                messageStore.Add(fieldId, "Name already exists.");
            }
        }
        else
        {
            var fieldId = editContext.Field(nameof(newCharacter.Name));
            messageStore.Add(fieldId, "Name is required.");
        }
    }


    private async Task DeleteCharacter(string name)
    {
        Console.WriteLine($"Deleting Name: {name}");
        if (selectedCharacters.Any(c => ComparisonUtils.EqualsIgnoreCase(c.Name, name)))
        {
            selectedCharacters.RemoveAll(c => ComparisonUtils.EqualsIgnoreCase(c.Name, name));
        }
        await DataStorage.DeleteData(name);
        _characters = await DataStorage.LoadData();
        StateHasChanged();
    }
    private void CopyCharacter(DataObject character)
    {
        newCharacter = new DataObject(character);
        messageStore.Clear();
        StateHasChanged();
    }


    private void EditCharacter(DataObject character)
    {
        newCharacter = new DataObject(character);
        oldName = character.Name;
        isEditMode = true;
        StateHasChanged();
    }

    private void CancelEdit()
    {
        newCharacter = new DataObject();
        oldName = string.Empty;
        isEditMode = false;
        StateHasChanged();
    }

    private void OnToggleSelect(ChangeEventArgs e, DataObject character)
    {
        bool isChecked = (bool)e.Value;
        if (isChecked)
        {
            if (selectedCharacters.Count < 2)
                selectedCharacters.Add(character);
        }
        else
        {
            selectedCharacters.RemoveAll(c => ComparisonUtils.EqualsIgnoreCase(c.Name, character.Name));
        }
    }
}